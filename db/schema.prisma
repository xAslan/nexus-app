// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @default(autoincrement()) @id
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("user")
  sessions       Session[]
}

model Session {
  id                 Int       @default(autoincrement()) @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Institution {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   // display name
  authType  String   @default("none")
  shortName String   @unique // shortcode for institution make into enum and save in DB
  type      AccountType   @default(UNKNOWN) // traditional, brokerage, bank, crypto_exchange, etc. make this into an ENUM and save in DB
}

model Account {
  id          Int          @default(autoincrement()) @id
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       // display name for account
  apiKey      String?      
  apiSecret   String?
  plaidToken  String?      
  institution Institution? 
  type        AccountType       //manual, blockchain_wallet, institution, defi ENUM
  wallet      Wallet?
  subAccounts SubAccount[]    
  user        User         @relation(fields: [userId], references: [id])
  userId      Int          
  lastSync    DateTime?
  lastSyncEnd DateTime?
  syncStatus  String       @default("inactive")
}

model Wallet {
  id        Int       @default(autoincrement()) @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  symbol    String    
  xpub      String?   
  address   String?
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int       
}

model SubAccount {
  id        Int       @default(autoincrement()) @id
  clientAccountId  String?  // the clients account number
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  holdings  Holding[]
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int
}

model Holding {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  asset    Asset  @relation(fields: [assetId], references: [id])
  assetId  Int
  amount    Float
  subAccount    SubAccount  @relation(fields: [subAccountId], references: [id])
  subAccountId Int 
  @@id([assetId, subAccountId])
}

model Asset {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   
  symbol    String
  address   String  @default("0")
  @@unique([symbol, address])
}

enum AccountType {
  BLOCKCHAIN_WALLET      // Zabo
  TRADITIONAL_BANK       // Plaid
  TRADITIONAL_BROKERAGE  // Plaid
  TRADITIONAL_CREDIT     // Plaid
  CRYPTO_EXCHANGE        // Zabo
  CRYPTO_SERVICE         // Zabo
  UNKNOWN
}