// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["groupBy"]
}

// --------------------------------------

model User {
  id              Int           @default(autoincrement()) @id
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String?
  email           String        @unique
  hashedPassword  String?       @map("hashed_password")
  role            String        @default("user")
  sessions        Session[]
  plaidToken      String?       @map("plaid_token")
  zaboUserObj     Json?         @map("zabo_user_obj")
  primaryCurrency String        @default("USD") @map("primary_currency")
  @@map("user")
}

model Session {
  id                 Int       @default(autoincrement()) @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime? @map("expires_at")
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?   @map("hashed_session_token")
  antiCSRFToken      String?   @map("anti_csrf_token")
  publicData         String?   @map("pulic_data")
  privateData        String?   @map("private_data")
  @@map("session")
}

model Institution {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   // display name
  authType  String   @default("none") @map("auth_type")
  shortName String   @unique @map("short_name") // shortcode for institution make into enum and save in DB
  logoURL   String?  @map("logo_url")
  type      AccountType   @default(UNKNOWN) // traditional, brokerage, bank, crypto_exchange, etc. make this into an ENUM and save in DB

  @@map("institution")
}

model Account {
  id              Int           @default(autoincrement()) @id
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String        // display name for account
  zaboToken       String?       @map("zabo_token")
  plaidItemId     String?       @map("plaid_item_id")
  institution     Institution? 
  type            AccountType       //manual, blockchain_wallet, institution, defi ENUM
  wallet          Wallet?
  subAccounts     SubAccount[]
  user            User          @relation(fields: [userId], references: [id])
  userId          Int          
  zaboAccountId   String?       @map("zabo_account_id")
  lastSync        DateTime?     @map("last_sync")
  lastSyncEnd     DateTime?     @map("last_sync_end")
  balances        Balance[]
  syncStatus      String        @default("inactive") @map("sync_status")
  @@unique(fields: [zaboAccountId, userId], name: "zaboAccountIdUserId")
  @@map("account")
}

model Balance {
  id                 Int       @default(autoincrement()) @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  amount             Int  //In USD
  accountId          Int
  account            Account @relation(fields: [accountId], references: [id])
}

model Wallet {
  id        Int       @default(autoincrement()) @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  symbol    String    
  xpub      String?   
  address   String?
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int       @map("account_id")
  @@map("wallet")
}

model SubAccount {
  id        Int       @default(autoincrement()) @id
  clientAccountId  String?  @map("client_account_id") // the clients account number
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  holdings  Holding[]
  account   Account   @relation(fields: [accountId], references: [id])
  accountId Int       @map("account_id")
  @@map("sub_account")
}

model Holding {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  asset         Asset   @relation(fields: [assetId], references: [id])
  assetId       Int     @map("asset_id")
  amount        Float
  fiatAmount    Float   @default(0) @map("fiat_amount")
  subAccount    SubAccount  @relation(fields: [subAccountId], references: [id])
  subAccountId  Int         @map("sub_account_id")
  @@id([assetId, subAccountId])
  @@map("holding")
}

//- Removed the compound unique on [address, symbol]
//- It was impossible to use connectOrCreate

model Asset {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   
  symbol    String
  address   String  @default("0")
  @@unique(fields: [symbol, address], name: "symbolAddress")
  @@map("asset")
}

enum AssetType {
  CRYPTO
  FIAT
  STOCK
  OTHER
}

enum AccountType {
  BLOCKCHAIN_WALLET      // Zabo
  TRADITIONAL_BANK       // Plaid
  TRADITIONAL_BROKERAGE  // Plaid
  TRADITIONAL_CREDIT     // Plaid
  CRYPTO_EXCHANGE        // Zabo
  CRYPTO_SERVICE         // Zabo
  UNKNOWN
}
